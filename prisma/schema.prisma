// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?

  accounts Account[]
  Houses   House[]
  Favorite Favorite[]
  Booking  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model House {
  id           String  @id @default(uuid())
  title        String?
  description  String?
  guests       Int?
  bedrooms     Int?
  bathrooms    Int?
  photo        String?
  price        Float?
  categoryName String?

  Favorite Favorite[]
  Booking  Booking[]

  addedCategory    Boolean @default(false)
  addedDescription Boolean @default(false)
  addedLocation    Boolean @default(false)

  createdAT DateTime     @default(now())
  User      User?        @relation(fields: [userId], references: [id])
  userId    String?
  Address   HouseAddress?
}

model HouseAddress {
  id        String   @id @default(uuid())
  street    String
  city      String
  localy    String
  zipCode   String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  home   House  @relation(fields: [homeId], references: [id])
  homeId String @unique
}

model Favorite {
  id     String  @id @default(uuid())
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  House  House?  @relation(fields: [homeId], references: [id])
  homeId String?

  createAt DateTime @default(now())
}

model Booking {
  id         String   @id @default(uuid())
  startDate  DateTime
  endDate    DateTime
  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  House  House?  @relation(fields: [homeId], references: [id])
  homeId String?
}
